@model Standartstyle.Models.GoodModel
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@Styles.Render("~/Content/fileuploader")
<div class="container-fluid">
    <div class="row clearfix"></div>
    <div class="form-group col-md-12">
        @using (Ajax.BeginForm("SaveGood", "Goods", new AjaxOptions
        {
            UpdateTargetId = "steps",
            HttpMethod = "Post",
            InsertionMode = InsertionMode.Replace,
            OnSuccess = "successCallback",
            OnFailure = "failureCallback",
        }, new { id = "ContractForm" }))
        {

            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <div class="vert-offset-top-1"></div>
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <label>Основные данные</label>
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(m => m.Name, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control mustHave" })
                                </div>
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(m => m.SelectedCategoryCode, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(m => m.SelectedCategoryCode, Model.Categories, new { @class = "form-control mustHave" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.Width, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(m => m.Width, new { @class = "form-control mustHave" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.Height, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(m => m.Height, new { @class = "form-control mustHave" })
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(m => m.Depth, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(m => m.Depth, new { @class = "form-control mustHave" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-12">
                                    @Html.LabelFor(m => m.Description, new { @class = "col-form-label" })
                                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control mustHave vresize" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <label>Изображения (&nbsp;<span class="glyphicon glyphicon-star" style="color: #eea236"></span>&nbsp;&ndash;&nbsp;изображение для главной)</label>

                        </div>
                        <div class="panel-body">
                            <div class="row" id="existingImages" @if (Model.GoodCode <= 0) { <text> hidden</text>}>
                                @if (Model.GoodCode > 0)
                                {
                                    <div class="form-group col-md-12">
                                        <label>Загруженные фото</label>
                                        <div class="row" id="existingImagesGalery">
                                            @Html.Partial("../Image/_ExistingImagesList", Model.Images)
                                        </div>
                                        <div id="ExistingImagesList">
                                            @for (var i = 0; i < Model.Images.Count; i++)
                                            {
                                                <div class="existing-image-data" elem-name="@Model.Images[i].Name">
                                                    @Html.HiddenFor(m => m.Images[i].Extension)
                                                    @Html.HiddenFor(m => m.Images[i].ImageCode)
                                                    @Html.HiddenFor(m => m.Images[i].Name)
                                                    @Html.HiddenFor(m => m.Images[i].Path)
                                                    @Html.HiddenFor(m => m.Images[i].MainImageFlag)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="row" id="newImages">
                                <div class="form-group col-md-12">
                                    <label>Новые фото</label>
                                    <div class="row" id="newImagesGalery">
                                    </div>
                                    <div id="NewImagesList">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-12">
                                    <div class="col-lg-12 col-md-12">
                                        <div class="file-loading">
                                            <input id="file-uploader" type="file" accept="image/*" multiple>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <label>Метки, теги</label>
                        </div>
                        <div class="panel-body">
                            <div class="row">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <label>Изготовлено из ДСП</label>
                        </div>
                        <div class="panel-body">
                            <div class="row">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <button type="submit" id="submitFormBtn" class="btn btn-success disabled" disabled="disabled">
                        <div class="btnBack">Сохранить</div>
                    </button>
                    <button class="btn btn-default">
                        <div class="btnBack">Отмена</div>
                    </button>
                </div>
            </div>
        }
    </div>
</div>
@section scripts{
    @Scripts.Render("~/bundles/fileupload")
    @Scripts.Render("~/Scripts/load-image.all.min.js")
    <script type="text/javascript">
        var fileFormFlag = true,
            fieldFormFlag = true,
            fileNames = [];

        function checkMusthaveFields() {
            var result = true;
            var musthaveFields = $(document).find(".mustHave");
            $(musthaveFields).each(function (idx, elem) {
                if ($(elem).val() === "") {
                    result = false;
                }
            });
            fieldFormFlag = result;
            checkFormFlags();
        }

        function checkFormFlags() {
            if (fieldFormFlag && fileFormFlag) {
                $("#submitFormBtn").removeAttr("disabled");
                if ($("#submitFormBtn").hasClass("disabled")) {
                    $("#submitFormBtn").removeClass("disabled");
                }
            }
            else {
                $("#submitFormBtn").attr("disabled", "disabled");
                if (!$("#submitFormBtn").hasClass("disabled")) {
                    $("#submitFormBtn").addClass("disabled");
                }
            }
        }

        function setUpMainImage(caller) {
            var imageName = $(caller).attr("id");
            var checkPointElement = $.find("input[value='" + imageName + "']");
            var idx = $(checkPointElement).attr("elem-index");
            $(".class-for-main").val(false);
            $("#NewImages_" + idx + "__MainImageFlag").val(true);
            refreshMainImageUI(caller);
        }

        function refreshMainImageUI(caller) {
            var elemForRemove = $("#existingImagesGalery .img-wrapper.main .main-image");
            $(elemForRemove).remove();
            $("#existingImagesGalery .img-wrapper").removeClass("main");

            elemForRemove = $("#newImagesGalery .img-wrapper.main .main-image");
            $(elemForRemove).remove();
            $("#newImagesGalery .img-wrapper").removeClass("main");

            $(caller).addClass("main");
            var template = "<div class='main-image'><span class='glyphicon glyphicon-star'</span></div>";
            $(caller).append(template);
        }

        function checkMainImageValueAndSetItsValue() {
            var mainElemnet = $("input.class-for-main[value='true']").first();
            if (mainElemnet.length < 1) {
                var firstImage = null;
                if ($("#ExistingImagesList").children().length > 0) {
                    firstImage = $("#ExistingImagesList input.class-for-main:first");
                    $(firstImage).val(true);
                }
                else if ($("#NewImagesList").children().length > 0) {
                    firstImage = $("#NewImagesList input.class-for-main:first");
                    $(firstImage).val(true);
                }

                var imageUIElementId = $(firstImage).attr("index-name");
                var imageUIElement = $("#" + imageUIElementId);
                setUpMainImage($(imageUIElement));
            }
        }

        function refreshModelImageData() {
            var idx = recalculateNewImageIndexes();

            for (var key in fileNames) {
                var image = fileNames[key];
                if (image != null && $("div[elem-name='" + image.Name + "']").length < 1) {
                    var template =
                        "<div class='new-image-data' elem-name='" + image.Name + "'>" +
                        "<input id='NewImages_" + idx + "__Extension' name='NewImages[" + idx + "].Extension' type='hidden' class='class-for-extension' value='" + image.Extension + "' elem-index='" + idx + "'>" +
                        "<input id='NewImages_" + idx + "__ImageCode' name='NewImages[" + idx + "].ImageCode' type='hidden' class='class-for-code' value='" + image.ImageCode + "' elem-index='" + idx + "'>" +
                        "<input id='NewImages_" + idx + "__Name' name='NewImages[" + idx + "].Name' type='hidden' class='class-for-name' value='" + image.Name + "' elem-index='" + idx + "'>" +
                        "<input id='NewImages_" + idx + "__Path' name='NewImages[" + idx + "].Path' type='hidden' class='class-for-path' value='" + image.Path + "' elem-index='" + idx + "'>" +
                        "<input id='NewImages_" + idx + "__MainImageFlag' name='NewImages[" + idx + "].MainImageFlag' type='hidden' class='class-for-main' index-name='" + image.Name + "' value='" + image.MainImageFlag + "' elem-index='" + idx + "'>" +
                        "</div>";
                    $("#NewImagesList").append(template);
                    idx++;
                }
            }
        }

        function recalculateNewImageIndexes() {
            var newImages = $("div.new-image-data");
            var idx = 0,
                idRegEx = /[a-z]+\_\d+\_/i,
                nameRegEx = /[a-z]+\[\d+\]/i;

            if (newImages.length > 0) {
                $(newImages).each(function (index, newImage) {
                    var inputs = $(newImage).find("input");
                    $(inputs).each(function (inputIndex, input) {
                        var id = $(input).attr("id");
                        var name = $(input).attr("name");

                        var idReplacement = "NewImages_" + idx + "_";
                        var nameReplacement = "NewImages[" + idx + "]";

                        var idSubstring = id.match(idRegEx);
                        var nameSubstring = name.match(nameRegEx);

                        var updatedId = id.replace(idSubstring[0], idReplacement);
                        var updatedName = name.replace(nameSubstring[0], nameReplacement);

                        $(input).attr("id", updatedId);
                        $(input).attr("name", updatedName);
                        $(input).attr("elem-index", idx);
                    });
                    idx++;
                });
            }
            return idx;
        }

        function deleteImage(id) {
            delete fileNames[id];
            var dataBlock = $("div[elem-name='" + id + "']");
            var uiElementBlock = $("#image-" + id);
            $(uiElementBlock).remove();
            $(dataBlock).remove();
            recalculateNewImageIndexes();
            checkMainImageValueAndSetItsValue();
        }


        function loadExistingImages() {

        }

        $(document).ready(function () {
            loadExistingImages();
            checkMusthaveFields();

            var $fileInputObject = $('#file-uploader'),
                initPlugin = function () {
                    $fileInputObject.fileinput({
                        uploadAsync: false,
                        language: 'ru',
                        showCaption: false,
                        dropZoneEnabled: false,
                        fileActionSettings: false,
                        autoReplace: true,
                        uploadUrl: '@Url.Action("UploadFiles", "Image")',
                        allowedFileExtensions: ['jpg', 'png', 'jpeg'],
                        previewFileType: "image",
                        browseClass: "btn btn-success",
                        browseLabel: "Выбрать изображения",
                        browseIcon: "<i class=\"glyphicon glyphicon-picture\"></i> ",
                        uploadClass: "btn btn-info",
                        uploadLabel: "Загрузить",
                        uploadIcon: "<i class=\"glyphicon glyphicon-upload\"></i> ",
                        showCaption: true,
                        showPreview: false,
                        showRemove: false,
                        showUpload: true,
                        uploadAsync: false,
                        maxFileSize: 40960
                    });
                };

            initPlugin();

            $(".mustHave").on("change", function () {
                checkMusthaveFields();
            });

            $fileInputObject.on('filebatchuploadsuccess', function (event, data, previewId, index) {
                var form = data.form, files = data.files, extra = data.extra,
                    response = data.response, reader = data.reader;
                if ($fileInputObject.data('fileinput')) {

                    var imageFiles = response.files;
                    $.post('@Url.Action("List", "Image")', { images: imageFiles }, function (result) {
                        $("#newImagesGalery").append(result);
                        var images = $("#newImagesGalery").find("img");
                        $(images).each(function (idx, elem) {
                            var imageParent = $("#newImagesGalery").find("#" + $(elem).attr("name"));
                            $(imageParent).click(function () {
                                setUpMainImage(this);
                            });
                        });

                        $(imageFiles).each(function (idx, image) {
                            var fileName = image.Name;
                            if (!fileNames.hasOwnProperty(fileName)) {
                                fileNames[fileName] = image;
                            }
                        });

                        refreshModelImageData();
                        checkMainImageValueAndSetItsValue();
                    });
                }
            });
        });
    </script>
}

